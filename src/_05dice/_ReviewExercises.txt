#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R10.5 Events

An event object is any number of actions that is taken by a user within the program.
etc.

The event source is the user-interface component, such as a button, that generates a particular event.

An event listener is a way by which a program can indicate which events it needs to receive. A listener can be set up
to "listen" to a certain kind of event.

R10.6 actionPerformed

The event listener would call the actionPerformed method once the event being listened to has happened. This can be triggered
by attaching the event listener to an applicable class (e.g., a JButton) via an addActionListener method.

R10.11 Inner class and event-listeners

Inner classes such as this are typically shorter, and they have access to instance variables and methods, which makes it
much more convenient.

Yes, without inner classes, this could still be achieved. They would need to be their own classes, and if they needed
access to instance methods or variables, those would need to be either public or package-private (and then in the same
package). The best way to preserve encapsulation is to at least have the instance variables be private and provide getters
to them.

R10.14 Object hierarchies

Method declared in JTextArea: append(String str)

Method inherited from JTextComponent: addCaretListener(CaretListener listener)

Method inherited from JComponent: addAncestorListener(AncestorListener listener)

R10.22 Graphic methods

- Change the name of the method to drawThreeBarFlag  (or something like that)
- Update parameters to allow two colors to be passed in from Color class
- Update the method body to use the parameter variable colors instead of the hardcoded Italian colors.

R11.2 Layout managers

A layout manager deals with placement as it relates to the other things/containers you are trying to place, and allows
the control to be more general and less specific. This way of coding is also more readable and understandable.

R11.11 ButtonGroup

Setting one button excludes any others, and thus they must be grouped. Check boxes, however, do not exclude each other by
being set, so they do not need to be grouped.

R11.19 Types of Events

An ActionEvent represents a high-level event that is generated by a component when the component-specific action occurs.

A MouseEvent represents an event specific to the mouse, and it captures a lot of different mouse-specific information.

R11.20 Events

For an action event, you can get: the associated action command string, the modifier keys held down during event, when the
event occurred, and a param string identifying the event.

For a mouse event, you can get: the mouse button, click count, location on screen, modifiers, mouse modifiers text, point,
x position, absolute x, y position, absolute y, whether it is pop up trigger, param string, and a translated point.

R11.21 ActionListener versus MouseListener

ActionListener is much more generic, so it generally just listens for one thing (an action), whereas MouseListener is
specifically listening on a mouse, so it can listen for much more specific kinds of events. Once the kind of thing for
which events being listened to is known and less abstract, the types of things listened for expands.



